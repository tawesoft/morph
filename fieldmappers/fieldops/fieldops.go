// Package fieldops implements morph FieldMappers that set appropriate
// Comparer, Copier, and Orderer expressions on morph Fields.
//
// These expressions are used to implement custom equality, copies, and sorting
// orders in code generated by [morph.Comparer], [morph.Copier], and
// [morph.Orderer].
package fieldops

import (
    "github.com/tawesoft/morph"
)

// Time is a [morph.FieldMapper][ that sets appropriate expressions on fields
// of type [time.Time].
func Time(in morph.Field, emit func(out morph.Field)) {
    if in.Type == "time.Time" {
        out := in
        out.Comparer = "$a.$.Equals($b.$)"
        out.Orderer  = "$b.$.After($a.$)"
        out.Truther  = "!this.IsZero()"
        emit(out)
    } else {
        emit(in)
    }
}

// StringsEqualFold is a [morph.FieldMapper] that sets comparer expressions on
// strings to use [strings.EqualFold] to perform a case-insensitive
// comparison using simple Unicode case-folding.
//
// For more advanced folding, use something like
// [github.com/tawesoft/golib/v2/text/fold].
//
// [github.com/tawesoft/golib/v2/text/fold]: https://pkg.go.dev/github.com/tawesoft/golib/v2/text/fold
func StringsEqualFold(in morph.Field, emit func(out morph.Field)) {
    if in.Type == "string" {
        out := in
        out.Comparer = "strings.EqualFold($a.$, $b.$)"
        emit(out)
    } else {
        emit(in)
    }
}
